// ููู ุงูุณูุฑูุฑ ุงูุฑุฆูุณู - Node.js + Express
// ูููุฑ API endpoints ูุชุทุจูู ุชุนููู ุงููุบุงุช

const express = require('express');
const cors = require('cors');
const lessonsData = require('./data.js');

// ุฅูุดุงุก ุชุทุจูู Express
const app = express();
const PORT = process.env.PORT || 5000;

// ุฅุนุฏุงุฏ Middleware
app.use(cors()); // ููุณูุงุญ ุจุงูุทูุจุงุช ูู ุงููุชุตูุญ (Cross-Origin)
app.use(express.json()); // ูุชุญููู JSON ูู ุงูุทูุจุงุช

// ===============================
// API Endpoints (ููุงุท ุงูููุงูุฉ)
// ===============================

// 1. ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ ููAPI
app.get('/', (req, res) => {
  res.json({
    message: "ูุฑุญุจุง ุจู ูู API ุชุนููู ุงููุบุงุช! ๐",
    version: "1.0.0",
    endpoints: {
      chapters: "/api/chapters - ููุญุตูู ุนูู ุฌููุน ุงููุตูู",
      lessons: "/api/lessons - ููุญุตูู ุนูู ุฌููุน ุงูุฏุฑูุณ",
      lesson: "/api/lessons/:id - ููุญุตูู ุนูู ุฏุฑุณ ูุญุฏุฏ",
      chapterLessons: "/api/chapters/:id/lessons - ููุญุตูู ุนูู ุฏุฑูุณ ูุตู ูุญุฏุฏ"
    }
  });
});

// 2. ุงูุญุตูู ุนูู ุฌููุน ุงููุตูู
app.get('/api/chapters', (req, res) => {
  try {
    // ุฅุฑุณุงู ุฌููุน ุงููุตูู ูุน ูุนูููุงุช ุฅุถุงููุฉ
    const chaptersWithInfo = lessonsData.chapters.map(chapter => ({
      ...chapter,
      lessonsCount: chapter.lessons.length, // ุนุฏุฏ ุงูุฏุฑูุณ ูู ูู ูุตู
      totalWords: chapter.lessons.reduce((total, lessonId) => {
        const lesson = lessonsData.lessons.find(l => l.id === lessonId);
        return total + (lesson ? lesson.words.length : 0);
      }, 0) // ุนุฏุฏ ุงููููุงุช ุงูุฅุฌูุงูู ูู ุงููุตู
    }));

    res.json({
      success: true,
      data: chaptersWithInfo,
      message: "ุชู ุฌูุจ ุฌููุน ุงููุตูู ุจูุฌุงุญ"
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "ุฎุทุฃ ูู ุฌูุจ ุงููุตูู",
      error: error.message
    });
  }
});

// 3. ุงูุญุตูู ุนูู ุฌููุน ุงูุฏุฑูุณ
app.get('/api/lessons', (req, res) => {
  try {
    res.json({
      success: true,
      data: lessonsData.lessons,
      count: lessonsData.lessons.length,
      message: "ุชู ุฌูุจ ุฌููุน ุงูุฏุฑูุณ ุจูุฌุงุญ"
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "ุฎุทุฃ ูู ุฌูุจ ุงูุฏุฑูุณ",
      error: error.message
    });
  }
});

// 4. ุงูุญุตูู ุนูู ุฏุฑุณ ูุญุฏุฏ ุจุงูู ID
app.get('/api/lessons/:id', (req, res) => {
  try {
    const lessonId = parseInt(req.params.id);
    const lesson = lessonsData.lessons.find(l => l.id === lessonId);
    
    if (!lesson) {
      return res.status(404).json({
        success: false,
        message: "ุงูุฏุฑุณ ุบูุฑ ููุฌูุฏ"
      });
    }

    // ุฅุถุงูุฉ ูุนูููุงุช ุฅุถุงููุฉ ุนู ุงูุฏุฑุณ
    const lessonWithInfo = {
      ...lesson,
      wordsCount: lesson.words.length,
      chapterInfo: lessonsData.chapters.find(c => c.id === lesson.chapterId)
    };

    res.json({
      success: true,
      data: lessonWithInfo,
      message: "ุชู ุฌูุจ ุงูุฏุฑุณ ุจูุฌุงุญ"
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "ุฎุทุฃ ูู ุฌูุจ ุงูุฏุฑุณ",
      error: error.message
    });
  }
});

// 5. ุงูุญุตูู ุนูู ุฏุฑูุณ ูุตู ูุญุฏุฏ
app.get('/api/chapters/:id/lessons', (req, res) => {
  try {
    const chapterId = parseInt(req.params.id);
    const chapter = lessonsData.chapters.find(c => c.id === chapterId);
    
    if (!chapter) {
      return res.status(404).json({
        success: false,
        message: "ุงููุตู ุบูุฑ ููุฌูุฏ"
      });
    }

    // ุฌูุจ ุฌููุน ุฏุฑูุณ ูุฐุง ุงููุตู
    const chapterLessons = lessonsData.lessons.filter(lesson => 
      chapter.lessons.includes(lesson.id)
    );

    res.json({
      success: true,
      data: {
        chapter: chapter,
        lessons: chapterLessons,
        lessonsCount: chapterLessons.length
      },
      message: `ุชู ุฌูุจ ุฏุฑูุณ ูุตู "${chapter.title}" ุจูุฌุงุญ`
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "ุฎุทุฃ ูู ุฌูุจ ุฏุฑูุณ ุงููุตู",
      error: error.message
    });
  }
});

// 6. ุงูุจุญุซ ูู ุงููููุงุช
app.get('/api/search', (req, res) => {
  try {
    const searchTerm = req.query.q; // ูุนุงูู ุงูุจุญุซ ูู URL
    
    if (!searchTerm) {
      return res.status(400).json({
        success: false,
        message: "ูุฑุฌู ุฅุฏุฎุงู ูููุฉ ููุจุญุซ"
      });
    }

    // ุงูุจุญุซ ูู ุฌููุน ุงููููุงุช
    const searchResults = [];
    lessonsData.lessons.forEach(lesson => {
      lesson.words.forEach(word => {
        if (
          word.english.toLowerCase().includes(searchTerm.toLowerCase()) ||
          word.arabic.includes(searchTerm) ||
          word.example_en.toLowerCase().includes(searchTerm.toLowerCase()) ||
          word.example_ar.includes(searchTerm)
        ) {
          searchResults.push({
            ...word,
            lessonInfo: {
              id: lesson.id,
              title: lesson.title,
              title_en: lesson.title_en
            }
          });
        }
      });
    });

    res.json({
      success: true,
      data: searchResults,
      count: searchResults.length,
      searchTerm: searchTerm,
      message: `ุชู ุงูุนุซูุฑ ุนูู ${searchResults.length} ูุชูุฌุฉ`
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "ุฎุทุฃ ูู ุงูุจุญุซ",
      error: error.message
    });
  }
});

// 7. ุฅุญุตุงุฆูุงุช ุงููุญุชูู
app.get('/api/stats', (req, res) => {
  try {
    const totalChapters = lessonsData.chapters.length;
    const totalLessons = lessonsData.lessons.length;
    const totalWords = lessonsData.lessons.reduce((total, lesson) => 
      total + lesson.words.length, 0
    );

    res.json({
      success: true,
      data: {
        totalChapters,
        totalLessons,
        totalWords,
        averageWordsPerLesson: Math.round(totalWords / totalLessons)
      },
      message: "ุชู ุฌูุจ ุงูุฅุญุตุงุฆูุงุช ุจูุฌุงุญ"
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "ุฎุทุฃ ูู ุฌูุจ ุงูุฅุญุตุงุฆูุงุช",
      error: error.message
    });
  }
});

// ===============================
// ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก
// ===============================

// ูุนุงูุฌุฉ ุงูุฑูุงุจุท ุบูุฑ ุงูููุฌูุฏุฉ (404)
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: "ูุฐุง ุงูุฑุงุจุท ุบูุฑ ููุฌูุฏ",
    requestedPath: req.originalUrl
  });
});

// ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก ุงูุนุงูุฉ
app.use((error, req, res, next) => {
  console.error('ุฎุทุฃ ูู ุงูุณูุฑูุฑ:', error);
  res.status(500).json({
    success: false,
    message: "ุฎุทุฃ ุฏุงุฎูู ูู ุงูุณูุฑูุฑ",
    error: process.env.NODE_ENV === 'development' ? error.message : 'ุฎุทุฃ ุฏุงุฎูู'
  });
});

// ===============================
// ุชุดุบูู ุงูุณูุฑูุฑ
// ===============================

app.listen(PORT, () => {
  console.log(`๐ ุงูุณูุฑูุฑ ูุนูู ุนูู: http://localhost:${PORT}`);
  console.log(`๐ API ุงูุชูุซูู: http://localhost:${PORT}/`);
  console.log(`๐ ุฌููุน ุงููุตูู: http://localhost:${PORT}/api/chapters`);
  console.log(`๐ ุฌููุน ุงูุฏุฑูุณ: http://localhost:${PORT}/api/lessons`);
});

// ุชุตุฏูุฑ ุงูุชุทุจูู ููุงุฎุชุจุงุฑ
module.exports = app;